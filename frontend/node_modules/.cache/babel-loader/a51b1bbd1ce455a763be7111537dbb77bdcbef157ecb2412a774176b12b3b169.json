{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(localStorage.getItem('token'));const[isLoading,setIsLoading]=useState(true);const login=newToken=>{localStorage.setItem('token',newToken);setToken(newToken);};const logout=()=>{localStorage.removeItem('token');setToken(null);setUser(null);};useEffect(()=>{const fetchUser=async()=>{if(!token){setIsLoading(false);return;}try{const response=await fetch('http://localhost:8000/auth/me',{headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){throw new Error('Failed to fetch user');}const userData=await response.json();setUser(userData);}catch(error){console.error('Error fetching user:',error);// Token might be invalid or expired\nlogout();}finally{setIsLoading(false);}};fetchUser();},[token]);const value={user,token,isAuthenticated:!!token,isLoading,login,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","token","setToken","localStorage","getItem","isLoading","setIsLoading","login","newToken","setItem","logout","removeItem","fetchUser","response","fetch","headers","concat","ok","Error","userData","json","error","console","value","isAuthenticated","Provider","useAuth","context"],"sources":["C:/Users/ADMIN/Desktop/agro/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\n\ninterface User {\n  username: string;\n  email?: string;\n  full_name?: string;\n  is_admin?: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (token: string) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const login = (newToken: string) => {\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (!token) {\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        const response = await fetch('http://localhost:8000/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch user');\n        }\n\n        const userData = await response.json();\n        setUser(userData);\n      } catch (error) {\n        console.error('Error fetching user:', error);\n        // Token might be invalid or expired\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUser();\n  }, [token]);\n\n  const value = {\n    user,\n    token,\n    isAuthenticated: !!token,\n    isLoading,\n    login,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAkBzF,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAA8BO,SAAS,CAAC,CAMzE,MAAO,MAAM,CAAAC,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACY,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAgBc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAChF,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGjB,QAAQ,CAAU,IAAI,CAAC,CAEzD,KAAM,CAAAkB,KAAK,CAAIC,QAAgB,EAAK,CAClCL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAED,QAAQ,CAAC,CACvCN,QAAQ,CAACM,QAAQ,CAAC,CACpB,CAAC,CAED,KAAM,CAAAE,MAAM,CAAGA,CAAA,GAAM,CACnBP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC,CAChCT,QAAQ,CAAC,IAAI,CAAC,CACdF,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAEDT,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CAACX,KAAK,CAAE,CACVK,YAAY,CAAC,KAAK,CAAC,CACnB,OACF,CAEA,GAAI,CACF,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,+BAA+B,CAAE,CAC5DC,OAAO,CAAE,CACP,eAAe,WAAAC,MAAA,CAAYf,KAAK,CAClC,CACF,CAAC,CAAC,CAEF,GAAI,CAACY,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CACtCpB,OAAO,CAACmB,QAAQ,CAAC,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C;AACAX,MAAM,CAAC,CAAC,CACV,CAAC,OAAS,CACRJ,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAEDM,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,CAACX,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAsB,KAAK,CAAG,CACZxB,IAAI,CACJE,KAAK,CACLuB,eAAe,CAAE,CAAC,CAACvB,KAAK,CACxBI,SAAS,CACTE,KAAK,CACLG,MACF,CAAC,CAED,mBAAOjB,IAAA,CAACC,WAAW,CAAC+B,QAAQ,EAACF,KAAK,CAAEA,KAAM,CAAAzB,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CAC9E,CAAC,CAED,MAAO,MAAM,CAAA4B,OAAO,CAAGA,CAAA,GAAuB,CAC5C,KAAM,CAAAC,OAAO,CAAGrC,UAAU,CAACI,WAAW,CAAC,CACvC,GAAIiC,OAAO,GAAKhC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAuB,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAS,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}