{"ast":null,"code":"import _objectSpread from\"C:/Users/ADMIN/Desktop/agro/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import{BrowserRouter as Router,Routes,Route,Navigate}from'react-router-dom';import'./App.css';import MapComponent from'./components/MapComponent';import Sidebar from'./components/Sidebar';import Header from'./components/Header';import AdminDashboard from'./components/AdminDashboard';import UserProfile from'./components/UserProfile';// Define types for our application state\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Main application component with map and sidebar\nconst MainApp=()=>{// State for selected area (coordinates, polygon, or search result)\nconst[selectedArea,setSelectedArea]=useState(null);// State for layer visibility\nconst[layerVisibility,setLayerVisibility]=useState({soil:true,rainfall:true,ndvi:false});// State for map center and zoom\nconst[mapCenter,setMapCenter]=useState([20.5937,78.9629]);// Center of India\nconst[mapZoom,setMapZoom]=useState(5);// State for loading data\nconst[isLoading,setIsLoading]=useState(false);// State for data from backend\nconst[vectorData,setVectorData]=useState(null);const[rasterData,setRasterData]=useState(null);// Function to toggle layer visibility\nconst toggleLayer=layer=>{setLayerVisibility(prev=>_objectSpread(_objectSpread({},prev),{},{[layer]:!prev[layer]}));};// Function to handle area selection\nconst handleAreaSelection=area=>{setSelectedArea(area);// Here we would typically make API calls to fetch data based on the selected area\nsetIsLoading(true);// Simulate API call delay for now\nsetTimeout(()=>{setVectorData({/* mock data */});setRasterData({/* mock data */});setIsLoading(false);},1000);};return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(MapComponent,{center:mapCenter,zoom:mapZoom,selectedArea:selectedArea,layerVisibility:layerVisibility,vectorData:vectorData,rasterData:rasterData,onAreaSelection:handleAreaSelection}),/*#__PURE__*/_jsx(Sidebar,{selectedArea:selectedArea,layerVisibility:layerVisibility,toggleLayer:toggleLayer,vectorData:vectorData,rasterData:rasterData,isLoading:isLoading})]})]});};// Main App component with routing\nfunction App(){return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(MainApp,{})}),/*#__PURE__*/_jsx(Route,{path:\"/profile\",element:/*#__PURE__*/_jsx(UserProfile,{})}),/*#__PURE__*/_jsx(Route,{path:\"/admin\",element:/*#__PURE__*/_jsx(AdminDashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true})})]})});}export default App;","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","MapComponent","Sidebar","Header","AdminDashboard","UserProfile","jsx","_jsx","jsxs","_jsxs","MainApp","selectedArea","setSelectedArea","layerVisibility","setLayerVisibility","soil","rainfall","ndvi","mapCenter","setMapCenter","mapZoom","setMapZoom","isLoading","setIsLoading","vectorData","setVectorData","rasterData","setRasterData","toggleLayer","layer","prev","_objectSpread","handleAreaSelection","area","setTimeout","className","children","center","zoom","onAreaSelection","App","path","element","to","replace"],"sources":["C:/Users/ADMIN/Desktop/agro/frontend/src/App.tsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport MapComponent from './components/MapComponent';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport AdminDashboard from './components/AdminDashboard';\nimport UserProfile from './components/UserProfile';\nimport { LatLngTuple } from 'leaflet';\n\n// Define types for our application state\nexport interface SelectedArea {\n  type: 'coordinates' | 'polygon' | 'search';\n  data: any; // This will be coordinates, polygon points, or search result\n  label?: string;\n}\n\nexport interface LayerVisibility {\n  soil: boolean;\n  rainfall: boolean;\n  ndvi: boolean;\n}\n\n// Main application component with map and sidebar\nconst MainApp: React.FC = () => {\n  // State for selected area (coordinates, polygon, or search result)\n  const [selectedArea, setSelectedArea] = useState<SelectedArea | null>(null);\n  \n  // State for layer visibility\n  const [layerVisibility, setLayerVisibility] = useState<LayerVisibility>({\n    soil: true,\n    rainfall: true,\n    ndvi: false\n  });\n  \n  // State for map center and zoom\n  const [mapCenter, setMapCenter] = useState<LatLngTuple>([20.5937, 78.9629]); // Center of India\n  const [mapZoom, setMapZoom] = useState<number>(5);\n  \n  // State for loading data\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  \n  // State for data from backend\n  const [vectorData, setVectorData] = useState<any>(null);\n  const [rasterData, setRasterData] = useState<any>(null);\n  \n  // Function to toggle layer visibility\n  const toggleLayer = (layer: keyof LayerVisibility) => {\n    setLayerVisibility(prev => ({\n      ...prev,\n      [layer]: !prev[layer]\n    }));\n  };\n  \n  // Function to handle area selection\n  const handleAreaSelection = (area: SelectedArea) => {\n    setSelectedArea(area);\n    // Here we would typically make API calls to fetch data based on the selected area\n    setIsLoading(true);\n    \n    // Simulate API call delay for now\n    setTimeout(() => {\n      setVectorData({ /* mock data */ });\n      setRasterData({ /* mock data */ });\n      setIsLoading(false);\n    }, 1000);\n  };\n  \n  return (\n    <div className=\"app-container\">\n      <Header />\n      <div className=\"main-content\">\n        <MapComponent \n          center={mapCenter}\n          zoom={mapZoom}\n          selectedArea={selectedArea}\n          layerVisibility={layerVisibility}\n          vectorData={vectorData}\n          rasterData={rasterData}\n          onAreaSelection={handleAreaSelection}\n        />\n        <Sidebar \n          selectedArea={selectedArea}\n          layerVisibility={layerVisibility}\n          toggleLayer={toggleLayer}\n          vectorData={vectorData}\n          rasterData={rasterData}\n          isLoading={isLoading}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Main App component with routing\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<MainApp />} />\n        <Route path=\"/profile\" element={<UserProfile />} />\n        <Route path=\"/admin\" element={<AdminDashboard />} />\n        {/* Catch all route */}\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}