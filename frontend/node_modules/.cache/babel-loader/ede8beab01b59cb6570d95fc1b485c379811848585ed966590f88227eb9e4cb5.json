{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\agro\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport MapComponent from './components/MapComponent';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport AdminDashboard from './components/AdminDashboard';\nimport UserProfile from './components/UserProfile';\n\n// Define types for our application state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Main application component with map and sidebar\nconst MainApp = () => {\n  _s();\n  // State for selected area (coordinates, polygon, or search result)\n  const [selectedArea, setSelectedArea] = useState(null);\n\n  // State for layer visibility\n  const [layerVisibility, setLayerVisibility] = useState({\n    soil: true,\n    rainfall: true,\n    ndvi: false\n  });\n\n  // State for map center and zoom\n  const [mapCenter, setMapCenter] = useState([20.5937, 78.9629]); // Center of India\n  const [mapZoom, setMapZoom] = useState(5);\n\n  // State for loading data\n  const [isLoading, setIsLoading] = useState(false);\n\n  // State for data from backend\n  const [vectorData, setVectorData] = useState(null);\n  const [rasterData, setRasterData] = useState(null);\n\n  // Function to toggle layer visibility\n  const toggleLayer = layer => {\n    setLayerVisibility(prev => ({\n      ...prev,\n      [layer]: !prev[layer]\n    }));\n  };\n\n  // Function to handle area selection\n  const handleAreaSelection = area => {\n    setSelectedArea(area);\n    // Here we would typically make API calls to fetch data based on the selected area\n    setIsLoading(true);\n\n    // Simulate API call delay for now\n    setTimeout(() => {\n      setVectorData({/* mock data */});\n      setRasterData({/* mock data */});\n      setIsLoading(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(MapComponent, {\n        center: mapCenter,\n        zoom: mapZoom,\n        selectedArea: selectedArea,\n        layerVisibility: layerVisibility,\n        vectorData: vectorData,\n        rasterData: rasterData,\n        onAreaSelection: handleAreaSelection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n        selectedArea: selectedArea,\n        layerVisibility: layerVisibility,\n        toggleLayer: toggleLayer,\n        vectorData: vectorData,\n        rasterData: rasterData,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n// Main App component with routing\n_s(MainApp, \"Cxdz50ri2tz408w5KGObI1LQuXg=\");\n_c = MainApp;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(MainApp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/profile\",\n        element: /*#__PURE__*/_jsxDEV(UserProfile, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/admin\",\n        element: /*#__PURE__*/_jsxDEV(AdminDashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"MainApp\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","MapComponent","Sidebar","Header","AdminDashboard","UserProfile","jsxDEV","_jsxDEV","MainApp","_s","selectedArea","setSelectedArea","layerVisibility","setLayerVisibility","soil","rainfall","ndvi","mapCenter","setMapCenter","mapZoom","setMapZoom","isLoading","setIsLoading","vectorData","setVectorData","rasterData","setRasterData","toggleLayer","layer","prev","handleAreaSelection","area","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","onAreaSelection","_c","App","path","element","to","replace","_c2","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/agro/frontend/src/App.tsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport MapComponent from './components/MapComponent';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport AdminDashboard from './components/AdminDashboard';\nimport UserProfile from './components/UserProfile';\nimport { LatLngTuple } from 'leaflet';\n\n// Define types for our application state\nexport interface SelectedArea {\n  type: 'coordinates' | 'polygon' | 'search';\n  data: any; // This will be coordinates, polygon points, or search result\n  label?: string;\n}\n\nexport interface LayerVisibility {\n  soil: boolean;\n  rainfall: boolean;\n  ndvi: boolean;\n}\n\n// Main application component with map and sidebar\nconst MainApp: React.FC = () => {\n  // State for selected area (coordinates, polygon, or search result)\n  const [selectedArea, setSelectedArea] = useState<SelectedArea | null>(null);\n  \n  // State for layer visibility\n  const [layerVisibility, setLayerVisibility] = useState<LayerVisibility>({\n    soil: true,\n    rainfall: true,\n    ndvi: false\n  });\n  \n  // State for map center and zoom\n  const [mapCenter, setMapCenter] = useState<LatLngTuple>([20.5937, 78.9629]); // Center of India\n  const [mapZoom, setMapZoom] = useState<number>(5);\n  \n  // State for loading data\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  \n  // State for data from backend\n  const [vectorData, setVectorData] = useState<any>(null);\n  const [rasterData, setRasterData] = useState<any>(null);\n  \n  // Function to toggle layer visibility\n  const toggleLayer = (layer: keyof LayerVisibility) => {\n    setLayerVisibility(prev => ({\n      ...prev,\n      [layer]: !prev[layer]\n    }));\n  };\n  \n  // Function to handle area selection\n  const handleAreaSelection = (area: SelectedArea) => {\n    setSelectedArea(area);\n    // Here we would typically make API calls to fetch data based on the selected area\n    setIsLoading(true);\n    \n    // Simulate API call delay for now\n    setTimeout(() => {\n      setVectorData({ /* mock data */ });\n      setRasterData({ /* mock data */ });\n      setIsLoading(false);\n    }, 1000);\n  };\n  \n  return (\n    <div className=\"app-container\">\n      <Header />\n      <div className=\"main-content\">\n        <MapComponent \n          center={mapCenter}\n          zoom={mapZoom}\n          selectedArea={selectedArea}\n          layerVisibility={layerVisibility}\n          vectorData={vectorData}\n          rasterData={rasterData}\n          onAreaSelection={handleAreaSelection}\n        />\n        <Sidebar \n          selectedArea={selectedArea}\n          layerVisibility={layerVisibility}\n          toggleLayer={toggleLayer}\n          vectorData={vectorData}\n          rasterData={rasterData}\n          isLoading={isLoading}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Main App component with routing\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<MainApp />} />\n        <Route path=\"/profile\" element={<UserProfile />} />\n        <Route path=\"/admin\" element={<AdminDashboard />} />\n        {/* Catch all route */}\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,WAAW,MAAM,0BAA0B;;AAGlD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAaA;AACA,MAAMC,OAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAsB,IAAI,CAAC;;EAE3E;EACA,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAkB;IACtEmB,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE;EACR,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;EAC7E,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAS,CAAC,CAAC;;EAEjD;EACA,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAU,KAAK,CAAC;;EAE1D;EACA,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAM,IAAI,CAAC;EACvD,MAAM,CAAC8B,UAAU,EAAEC,aAAa,CAAC,GAAG/B,QAAQ,CAAM,IAAI,CAAC;;EAEvD;EACA,MAAMgC,WAAW,GAAIC,KAA4B,IAAK;IACpDf,kBAAkB,CAACgB,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP,CAACD,KAAK,GAAG,CAACC,IAAI,CAACD,KAAK;IACtB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,mBAAmB,GAAIC,IAAkB,IAAK;IAClDpB,eAAe,CAACoB,IAAI,CAAC;IACrB;IACAT,YAAY,CAAC,IAAI,CAAC;;IAElB;IACAU,UAAU,CAAC,MAAM;MACfR,aAAa,CAAC,CAAE,gBAAiB,CAAC;MAClCE,aAAa,CAAC,CAAE,gBAAiB,CAAC;MAClCJ,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEf,OAAA;IAAK0B,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B3B,OAAA,CAACJ,MAAM;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV/B,OAAA;MAAK0B,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B3B,OAAA,CAACN,YAAY;QACXsC,MAAM,EAAEtB,SAAU;QAClBuB,IAAI,EAAErB,OAAQ;QACdT,YAAY,EAAEA,YAAa;QAC3BE,eAAe,EAAEA,eAAgB;QACjCW,UAAU,EAAEA,UAAW;QACvBE,UAAU,EAAEA,UAAW;QACvBgB,eAAe,EAAEX;MAAoB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACF/B,OAAA,CAACL,OAAO;QACNQ,YAAY,EAAEA,YAAa;QAC3BE,eAAe,EAAEA,eAAgB;QACjCe,WAAW,EAAEA,WAAY;QACzBJ,UAAU,EAAEA,UAAW;QACvBE,UAAU,EAAEA,UAAW;QACvBJ,SAAS,EAAEA;MAAU;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAA7B,EAAA,CAtEMD,OAAiB;AAAAkC,EAAA,GAAjBlC,OAAiB;AAuEvB,SAASmC,GAAGA,CAAA,EAAG;EACb,oBACEpC,OAAA,CAACV,MAAM;IAAAqC,QAAA,eACL3B,OAAA,CAACT,MAAM;MAAAoC,QAAA,gBACL3B,OAAA,CAACR,KAAK;QAAC6C,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEtC,OAAA,CAACC,OAAO;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxC/B,OAAA,CAACR,KAAK;QAAC6C,IAAI,EAAC,UAAU;QAACC,OAAO,eAAEtC,OAAA,CAACF,WAAW;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnD/B,OAAA,CAACR,KAAK;QAAC6C,IAAI,EAAC,QAAQ;QAACC,OAAO,eAAEtC,OAAA,CAACH,cAAc;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEpD/B,OAAA,CAACR,KAAK;QAAC6C,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEtC,OAAA,CAACP,QAAQ;UAAC8C,EAAE,EAAC,GAAG;UAACC,OAAO;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAACU,GAAA,GAZQL,GAAG;AAcZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}