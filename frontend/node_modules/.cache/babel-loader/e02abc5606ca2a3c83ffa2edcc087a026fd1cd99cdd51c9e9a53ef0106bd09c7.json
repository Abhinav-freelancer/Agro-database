{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DataPanel=_ref=>{let{selectedArea,vectorData,rasterData}=_ref;if(!selectedArea)return null;// In a real app, this data would come from the backend API\n// For now, we'll use mock data\nconst mockSoilData={type:'Alluvial',ph:6.8,organicMatter:'2.3%',nitrogen:'Medium',phosphorus:'Low',potassium:'High'};const mockRainfallData={annualAverage:'1200mm',monsoonAverage:'850mm',drySeasonAverage:'120mm',zone:'High Rainfall Zone'};const mockCropData={suitableCrops:['Rice','Wheat','Sugarcane','Vegetables'],recommendedCrop:'Rice',growingSeason:'June - November'};return/*#__PURE__*/_jsxs(\"div\",{className:\"data-panel\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Area Information\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"area-info\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Selection Type:\"}),\" \",selectedArea.type,selectedArea.label&&/*#__PURE__*/_jsxs(\"span\",{children:[\" - \",selectedArea.label]})]}),selectedArea.type==='polygon'&&/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Area Size:\"}),\" ~25 hectares\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"data-section\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Soil Data\"}),/*#__PURE__*/_jsx(\"table\",{children:/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Soil Type:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockSoilData.type})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"pH Level:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockSoilData.ph})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Organic Matter:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockSoilData.organicMatter})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Nitrogen:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockSoilData.nitrogen})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Phosphorus:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockSoilData.phosphorus})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Potassium:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockSoilData.potassium})]})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"data-section\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Rainfall Data\"}),/*#__PURE__*/_jsx(\"table\",{children:/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Annual Average:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockRainfallData.annualAverage})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Monsoon Average:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockRainfallData.monsoonAverage})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Dry Season Average:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockRainfallData.drySeasonAverage})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Rainfall Zone:\"}),/*#__PURE__*/_jsx(\"td\",{children:mockRainfallData.zone})]})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"data-section\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Crop Suitability\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Suitable Crops:\"}),\" \",mockCropData.suitableCrops.join(', ')]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Recommended Crop:\"}),\" \",mockCropData.recommendedCrop]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Growing Season:\"}),\" \",mockCropData.growingSeason]})]})]});};export default DataPanel;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","DataPanel","_ref","selectedArea","vectorData","rasterData","mockSoilData","type","ph","organicMatter","nitrogen","phosphorus","potassium","mockRainfallData","annualAverage","monsoonAverage","drySeasonAverage","zone","mockCropData","suitableCrops","recommendedCrop","growingSeason","className","children","label","join"],"sources":["C:/Users/ADMIN/Desktop/agro/frontend/src/components/DataPanel.tsx"],"sourcesContent":["import React from 'react';\nimport { SelectedArea } from '../App';\n\ninterface DataPanelProps {\n  selectedArea: SelectedArea | null;\n  vectorData: any;\n  rasterData: any;\n}\n\nconst DataPanel: React.FC<DataPanelProps> = ({ selectedArea, vectorData, rasterData }) => {\n  if (!selectedArea) return null;\n  \n  // In a real app, this data would come from the backend API\n  // For now, we'll use mock data\n  const mockSoilData = {\n    type: 'Alluvial',\n    ph: 6.8,\n    organicMatter: '2.3%',\n    nitrogen: 'Medium',\n    phosphorus: 'Low',\n    potassium: 'High'\n  };\n  \n  const mockRainfallData = {\n    annualAverage: '1200mm',\n    monsoonAverage: '850mm',\n    drySeasonAverage: '120mm',\n    zone: 'High Rainfall Zone'\n  };\n  \n  const mockCropData = {\n    suitableCrops: ['Rice', 'Wheat', 'Sugarcane', 'Vegetables'],\n    recommendedCrop: 'Rice',\n    growingSeason: 'June - November'\n  };\n  \n  return (\n    <div className=\"data-panel\">\n      <h3>Area Information</h3>\n      \n      {/* Display area type and details */}\n      <div className=\"area-info\">\n        <p>\n          <strong>Selection Type:</strong> {selectedArea.type}\n          {selectedArea.label && <span> - {selectedArea.label}</span>}\n        </p>\n        {selectedArea.type === 'polygon' && (\n          <p><strong>Area Size:</strong> ~25 hectares</p>\n        )}\n      </div>\n      \n      {/* Soil Data */}\n      <div className=\"data-section\">\n        <h4>Soil Data</h4>\n        <table>\n          <tbody>\n            <tr>\n              <td>Soil Type:</td>\n              <td>{mockSoilData.type}</td>\n            </tr>\n            <tr>\n              <td>pH Level:</td>\n              <td>{mockSoilData.ph}</td>\n            </tr>\n            <tr>\n              <td>Organic Matter:</td>\n              <td>{mockSoilData.organicMatter}</td>\n            </tr>\n            <tr>\n              <td>Nitrogen:</td>\n              <td>{mockSoilData.nitrogen}</td>\n            </tr>\n            <tr>\n              <td>Phosphorus:</td>\n              <td>{mockSoilData.phosphorus}</td>\n            </tr>\n            <tr>\n              <td>Potassium:</td>\n              <td>{mockSoilData.potassium}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Rainfall Data */}\n      <div className=\"data-section\">\n        <h4>Rainfall Data</h4>\n        <table>\n          <tbody>\n            <tr>\n              <td>Annual Average:</td>\n              <td>{mockRainfallData.annualAverage}</td>\n            </tr>\n            <tr>\n              <td>Monsoon Average:</td>\n              <td>{mockRainfallData.monsoonAverage}</td>\n            </tr>\n            <tr>\n              <td>Dry Season Average:</td>\n              <td>{mockRainfallData.drySeasonAverage}</td>\n            </tr>\n            <tr>\n              <td>Rainfall Zone:</td>\n              <td>{mockRainfallData.zone}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Crop Suitability */}\n      <div className=\"data-section\">\n        <h4>Crop Suitability</h4>\n        <p><strong>Suitable Crops:</strong> {mockCropData.suitableCrops.join(', ')}</p>\n        <p><strong>Recommended Crop:</strong> {mockCropData.recommendedCrop}</p>\n        <p><strong>Growing Season:</strong> {mockCropData.growingSeason}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default DataPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}