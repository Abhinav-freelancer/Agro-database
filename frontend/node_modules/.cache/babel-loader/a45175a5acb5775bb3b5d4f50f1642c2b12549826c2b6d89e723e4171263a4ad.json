{"ast":null,"code":"import React,{useRef}from'react';import{MapContainer,TileLayer,FeatureGroup,Polygon,GeoJSON}from'react-leaflet';import{EditControl}from'react-leaflet-draw';import'leaflet/dist/leaflet.css';import'leaflet-draw/dist/leaflet.draw.css';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const MapComponent=_ref=>{let{center,zoom,selectedArea,layerVisibility,vectorData,rasterData,onAreaSelection}=_ref;const featureGroupRef=useRef(null);// Handle polygon creation\nconst handleCreated=e=>{const{layerType,layer}=e;if(layerType==='polygon'){const polygonCoords=layer.getLatLngs()[0].map(coord=>[coord.lat,coord.lng]);onAreaSelection({type:'polygon',data:polygonCoords});}};// Render selected area if it exists\nconst renderSelectedArea=()=>{if(!selectedArea)return null;if(selectedArea.type==='polygon'){return/*#__PURE__*/_jsx(Polygon,{positions:selectedArea.data,pathOptions:{color:'green',fillColor:'green',fillOpacity:0.2}});}// Other area types (point, etc.) would be handled here\nreturn null;};// Render vector layers based on visibility settings\nconst renderVectorLayers=()=>{if(!vectorData)return null;return/*#__PURE__*/_jsxs(_Fragment,{children:[layerVisibility.soil&&vectorData.soil&&/*#__PURE__*/_jsx(GeoJSON,{data:vectorData.soil,style:()=>({color:'#8B4513',weight:2,opacity:0.7})}),layerVisibility.rainfall&&vectorData.rainfall&&/*#__PURE__*/_jsx(GeoJSON,{data:vectorData.rainfall,style:()=>({color:'#0000FF',weight:2,opacity:0.7})})]});};// Render raster overlay if visible\nconst renderRasterOverlay=()=>{if(!layerVisibility.ndvi||!rasterData||!rasterData.ndviUrl)return null;return/*#__PURE__*/_jsx(TileLayer,{url:rasterData.ndviUrl,opacity:0.7});};return/*#__PURE__*/_jsx(\"div\",{className:\"map-container\",children:/*#__PURE__*/_jsxs(MapContainer,{center:center,zoom:zoom,style:{height:'100%',width:'100%'},children:[/*#__PURE__*/_jsx(TileLayer,{attribution:\"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}),/*#__PURE__*/_jsx(FeatureGroup,{ref:featureGroupRef,children:/*#__PURE__*/_jsx(EditControl,{position:\"topright\",onCreated:handleCreated,draw:{rectangle:false,circle:false,circlemarker:false,marker:true,polyline:false}})}),renderSelectedArea(),renderVectorLayers(),renderRasterOverlay()]})});};export default MapComponent;","map":{"version":3,"names":["React","useRef","MapContainer","TileLayer","FeatureGroup","Polygon","GeoJSON","EditControl","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","MapComponent","_ref","center","zoom","selectedArea","layerVisibility","vectorData","rasterData","onAreaSelection","featureGroupRef","handleCreated","e","layerType","layer","polygonCoords","getLatLngs","map","coord","lat","lng","type","data","renderSelectedArea","positions","pathOptions","color","fillColor","fillOpacity","renderVectorLayers","children","soil","style","weight","opacity","rainfall","renderRasterOverlay","ndvi","ndviUrl","url","className","height","width","attribution","ref","position","onCreated","draw","rectangle","circle","circlemarker","marker","polyline"],"sources":["C:/Users/ADMIN/Desktop/agro/frontend/src/components/MapComponent.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { MapContainer, TileLayer, FeatureGroup, Polygon, GeoJSON } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport { LatLngTuple, LatLngExpression } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport { SelectedArea, LayerVisibility } from '../App';\n\ninterface MapComponentProps {\n  center: LatLngTuple;\n  zoom: number;\n  selectedArea: SelectedArea | null;\n  layerVisibility: LayerVisibility;\n  vectorData: any;\n  rasterData: any;\n  onAreaSelection: (area: SelectedArea) => void;\n}\n\nconst MapComponent: React.FC<MapComponentProps> = ({\n  center,\n  zoom,\n  selectedArea,\n  layerVisibility,\n  vectorData,\n  rasterData,\n  onAreaSelection\n}) => {\n  const featureGroupRef = useRef<any>(null);\n\n  // Handle polygon creation\n  const handleCreated = (e: any) => {\n    const { layerType, layer } = e;\n    \n    if (layerType === 'polygon') {\n      const polygonCoords = layer.getLatLngs()[0].map((coord: any) => [\n        coord.lat,\n        coord.lng\n      ]);\n      \n      onAreaSelection({\n        type: 'polygon',\n        data: polygonCoords\n      });\n    }\n  };\n\n  // Render selected area if it exists\n  const renderSelectedArea = () => {\n    if (!selectedArea) return null;\n\n    if (selectedArea.type === 'polygon') {\n      return (\n        <Polygon \n          positions={selectedArea.data as LatLngExpression[]}\n          pathOptions={{ color: 'green', fillColor: 'green', fillOpacity: 0.2 }}\n        />\n      );\n    }\n    \n    // Other area types (point, etc.) would be handled here\n    return null;\n  };\n\n  // Render vector layers based on visibility settings\n  const renderVectorLayers = () => {\n    if (!vectorData) return null;\n\n    return (\n      <>\n        {layerVisibility.soil && vectorData.soil && (\n          <GeoJSON \n            data={vectorData.soil}\n            style={() => ({ color: '#8B4513', weight: 2, opacity: 0.7 })}\n          />\n        )}\n        {layerVisibility.rainfall && vectorData.rainfall && (\n          <GeoJSON \n            data={vectorData.rainfall}\n            style={() => ({ color: '#0000FF', weight: 2, opacity: 0.7 })}\n          />\n        )}\n      </>\n    );\n  };\n\n  // Render raster overlay if visible\n  const renderRasterOverlay = () => {\n    if (!layerVisibility.ndvi || !rasterData || !rasterData.ndviUrl) return null;\n\n    return (\n      <TileLayer\n        url={rasterData.ndviUrl}\n        opacity={0.7}\n      />\n    );\n  };\n\n  return (\n    <div className=\"map-container\">\n      <MapContainer \n        center={center} \n        zoom={zoom} \n        style={{ height: '100%', width: '100%' }}\n      >\n        {/* Base map layer */}\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        {/* Drawing tools */}\n        <FeatureGroup ref={featureGroupRef}>\n          <EditControl\n            position=\"topright\"\n            onCreated={handleCreated}\n            draw={{\n              rectangle: false,\n              circle: false,\n              circlemarker: false,\n              marker: true,\n              polyline: false\n            }}\n          />\n        </FeatureGroup>\n\n        {/* Selected area */}\n        {renderSelectedArea()}\n\n        {/* Vector layers */}\n        {renderVectorLayers()}\n\n        {/* Raster overlay */}\n        {renderRasterOverlay()}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}